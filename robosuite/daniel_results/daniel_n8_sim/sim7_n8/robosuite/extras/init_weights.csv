policy,OrderedDict([('log_std', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('mlp_extractor.shared_net.0.weight', tensor([[-0.1246,  0.1164, -0.4554],
        [ 0.2753,  0.2442,  0.1020],
        [ 0.4926,  0.0967,  0.0909],
        [ 0.0932, -0.5794,  0.0136],
        [-0.2660,  0.1973, -0.2277],
        [-0.4913, -0.1154,  0.4587],
        [-0.2151, -0.4014,  0.0614],
        [ 0.0392, -0.0343, -0.1674],
        [ 0.0110, -0.1875,  0.1839],
        [ 0.0586,  0.0940, -0.3339],
        [-0.5518,  0.2039,  0.0667],
        [-0.3597, -0.2137, -0.0756],
        [ 0.2608,  0.4139,  0.0899],
        [ 0.3987, -0.4655, -0.5092],
        [-0.0816,  0.1038, -0.4620],
        [ 0.3457, -0.0441,  0.1347],
        [-0.2906, -0.1235, -0.0373],
        [ 0.2880,  0.3664, -0.0618],
        [-0.3287,  0.0744, -0.3422],
        [ 0.1440, -0.2051,  0.1621],
        [-0.1102, -0.0300,  0.1440],
        [ 0.1069,  0.1721,  0.3796],
        [ 0.2266, -0.2783, -0.0999],
        [ 0.0355, -0.2020,  0.1625],
        [ 0.0051,  0.3991, -0.2158],
        [-0.1529,  0.1640, -0.2421],
        [-0.2064, -0.0159,  0.0695],
        [ 0.0839, -0.2070,  0.1692],
        [ 0.1097, -0.3713, -0.2718],
        [ 0.1635,  0.1676, -0.2041],
        [ 0.1343, -0.0801,  0.3225],
        [-0.0686, -0.2962, -0.3428]])), ('mlp_extractor.shared_net.0.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])), ('mlp_extractor.shared_net.2.weight', tensor([[ 0.0192,  0.4985,  0.0798,  ..., -0.3781, -0.2531,  0.1985],
        [-0.0978, -0.3226, -0.7786,  ..., -0.0046, -0.3133, -0.0195],
        [-0.0331, -0.1640,  0.1788,  ...,  0.2215, -0.0345, -0.1131],
        ...,
        [-0.2216,  0.3712, -0.1687,  ...,  0.0306, -0.1761,  0.0992],
        [ 0.0613,  0.0431,  0.4066,  ..., -0.0045, -0.1662,  0.2460],
        [ 0.1030,  0.0781, -0.2165,  ...,  0.0078,  0.0186,  0.1870]])), ('mlp_extractor.shared_net.2.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])), ('action_net.weight', tensor([[-5.9742e-04, -7.3940e-04, -3.3432e-05,  ..., -2.1203e-03,
         -4.3745e-03, -8.5651e-04],
        [ 1.7701e-03, -1.9773e-03,  1.6655e-03,  ...,  3.7627e-03,
         -3.5615e-04, -1.5332e-03],
        [-1.1804e-04,  1.2532e-03, -8.8913e-04,  ...,  2.2479e-03,
          1.3642e-03, -3.7540e-04],
        ...,
        [-5.3906e-04, -6.9459e-05, -1.5333e-03,  ..., -4.0008e-04,
          1.5175e-03,  1.8015e-03],
        [ 1.3683e-03, -8.6940e-04,  9.5064e-04,  ...,  1.7381e-03,
          3.0849e-03, -3.4715e-04],
        [ 9.7740e-04,  1.0164e-03, -4.4544e-04,  ..., -1.9383e-03,
          2.7418e-04, -2.1142e-05]])), ('action_net.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('value_net.weight', tensor([[-0.0129, -0.3285,  0.0826, -0.0103, -0.1590, -0.1022,  0.4102,  0.0031,
          0.1446, -0.0030, -0.0266, -0.0886,  0.0511,  0.0698, -0.1653, -0.1574,
          0.2596,  0.0867, -0.0999, -0.2272, -0.0384,  0.5330,  0.0262,  0.2058,
          0.1498, -0.0751, -0.1380,  0.0792,  0.1063,  0.0316, -0.1505, -0.1962]])), ('value_net.bias', tensor([0.]))])
policy.optimizer,{'state': {}, 'param_groups': [{'lr': 0.0003, 'betas': (0.9, 0.999), 'eps': 1e-05, 'weight_decay': 0, 'amsgrad': False, 'maximize': False, 'foreach': None, 'capturable': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8]}]}
